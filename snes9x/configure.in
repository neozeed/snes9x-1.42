AC_REVISION("$Id: configure.in,v 1.28 2003/11/21 12:50:46 pbortas Exp $")
AC_INIT(snes9x.h)

AC_PROG_CC
AC_PROG_CXX
AC_LANG_CPLUSPLUS

#FIXME: Warn about glide, opengl and aido mutually exclusivity.
#FIXME: Make svgalib build part of this and clean up the Makefile
AC_ARG_WITH(debugger, [  --with(out)-debugger      Enable debugger (default: without)],[],[with_debugger=no])
AC_ARG_WITH(glide,    [  --with(out)-glide         Use 3Dfx glide for output (default: without)],[],[with_glide=no])
AC_ARG_WITH(opengl,   [  --with(out)-opengl        Use OpenGL for output (default: without)],[],[with_opengl=no])
AC_ARG_WITH(aido,     [  --with(out)-aido          Use a shared memory area for output (default: without)],[],[with_aido=no])
AC_ARG_WITH(joystick, [  --with(out)-joystick      Enable joystick support if available (default: with)],[],[with_joystick=yes])
AC_ARG_WITH(assembler,[  --with(out)-assembler     Use assembler cores if available (default: with)],[],[with_assembler=yes])
AC_ARG_WITH(sdd1-decomp,[  --with(out)-sdd1-decomp Use SDD1 decompression (default: with)],[],[with_sdd1_decomp=yes])
AC_ARG_WITH(png,      [  --with(out)-screenshot	   Screenshot support through libpng if available (default: with)],[],[with_screenshot=yes])

	
AC_DEFUN(AC_SYS_COMPILER_FLAG,
[
  AC_MSG_CHECKING($1)
  AC_CACHE_VAL(snes9x_cv_option_$2,
  [
    OLD_CXXFLAGS="[$]CXXFLAGS"
    CXXFLAGS="[$]OLD_CXXFLAGS $1"
    old_ac_link="[$]ac_link"
    ac_link="[$]old_ac_link 2>conftezt.out.2"
    AC_TRY_RUN([
      int foo;
      int main(int argc, char **argv)
      {
        /* The following code triggs gcc:s generation of aline opcodes,
	 * which some versions of as does not support.
	 */
	if (argc > 0) argc = 0;
	return argc;
      }
    ],snes9x_cv_option_$2=yes,
      snes9x_cv_option_$2=no, [
      AC_TRY_LINK([], [], snes9x_cv_option_$2=yes, snes9x_cv_option_$2=no)
    ])
    CXXFLAGS="[$]OLD_CXXFLAGS"
    ac_link="[$]old_ac_link"
    if grep -i 'unrecognized option' <conftezt.out.2 >/dev/null; then
      snes9x_cv_option_$2=no
    elif grep -i 'unknown option' <conftezt.out.2 >/dev/null; then
      # cc/HPUX says the following regarding -q64:
      #
      # cc: warning 422: Unknown option "6" ignored.
      # cc: warning 422: Unknown option "4" ignored.
      snes9x_cv_option_$2=no
    elif grep -i 'optimizer bugs' <conftezt.out.2 >/dev/null; then
      # gcc/FreeBSD-4.6/alpha says the following regarding -O2:
      #
      # cc1: warning: 
      # ***
      # ***     The -O2 flag TRIGGERS KNOWN OPTIMIZER BUGS ON THIS PLATFORM
      # ***
      snes9x_cv_option_$2=no
    elif grep -i 'not found' <conftezt.out.2 >/dev/null; then
      # cc/AIX says the following regarding +O3:
      #
      # cc: 1501-228 input file +O3 not found
      snes9x_cv_option_$2=no
    elif grep -i 'ignored' <conftezt.out.2 >/dev/null; then
      # gcc/AIX says the following regarding -fpic:
      #
      # cc1: warning: -fpic ignored (all code is position independent)
      snes9x_cv_option_$2=no
    else :; fi
#    rm conftezt.out.2
  ])

  if test x"[$]snes9x_cv_option_$2" = "xyes" ; then
    $3="[$]$3 $1"
    case "$3" in
      OPTIMIZE)
        CXXFLAGS="[$]CXXFLAGS $1"
      ;;
    esac
    AC_MSG_RESULT(yes)
    $5
  else
    AC_MSG_RESULT(no)
    $4
  fi
])

OPTIMIZE="${OPTFLAGS-}"
RTTIFLAG=""

AC_SYS_COMPILER_FLAG(-mcpu=pentiumpro, pentiumpro, OPTIMIZE, [
  AC_SYS_COMPILER_FLAG(-mcpu=pentium, pentium, OPTIMIZE)
])

AC_SYS_COMPILER_FLAG(-mcpu=ultrasparc, ultrasparc, OPTIMIZE, [
  AC_SYS_COMPILER_FLAG(-mcpu=supersparc, supersparc, OPTIMIZE)
])

dnl FIXME: Anything above -O1 segfaults SuperFX
dnl AC_SYS_COMPILER_FLAG(-O6, o6, OPTIMIZE, [
dnl   AC_SYS_COMPILER_FLAG(-O4, o4, OPTIMIZE, [
dnl     AC_SYS_COMPILER_FLAG(-O2, o2, OPTIMIZE)
dnl   ])
dnl ])
AC_SYS_COMPILER_FLAG(-O1, o1, OPTIMIZE)

AC_SYS_COMPILER_FLAG(-fomit-frame-pointer, omit_frame_pointer, OPTIMIZE)
AC_SYS_COMPILER_FLAG(-fno-exceptions, no_exceptions, OPTIMIZE)
AC_SYS_COMPILER_FLAG(-Wall, Wall, OPTIMIZE)
AC_SYS_COMPILER_FLAG(-W, W, OPTIMIZE)
AC_SYS_COMPILER_FLAG(-pedantic, pedantic, OPTIMIZE)
dnl FIXME: Most of these should be fixed, but several are part of the API.
AC_SYS_COMPILER_FLAG(-Wno-unused-parameter, Wno_unused_parameter, OPTIMIZE)
AC_SYS_COMPILER_FLAG(-pipe, pipe, OPTIMIZE)
AC_SYS_COMPILER_FLAG(-fno-rtti, no_rtti, RTTIFLAG)

ZSNESFX='#ZSNESFX=1'
ZSNESC4='#ZSNESC4=1'
ASMCPU='#ASMCPU=1'
ASMKREED='#ASMKREED=1'
SDD1_DECOMP='#SDD1_DECOMP=1'
SPC700ASM='#SPC700ASM=1'
I386SPC=''
CPUINC=''

SYSDEFINES=''
SYSLIBS=''
NASM='nasm'


dnl Display output
GLIDE='#GLIDE=1'
AIDO='#AIDO=1'
OPENGL='#OPENGL=1'
snes9x_info_display=X11

if test yes = "$with_glide" ; then
  GLIDE='GLIDE=1'
  snes9x_info_display=Glide
else
  if test yes = "$with_opengl" ; then
    OPENGL='OPENGL=1'
    snes9x_info_display=OpenGL
  else
    if test yes = "$with_aido" ; then
      AIDO='AIDO=1'
      snes9x_info_display=AIDO
    fi
  fi
fi



AC_MSG_CHECKING(if the CPU is IA32)
AC_CACHE_VAL(snes9x_cv_i386_cpu, [
  AC_TRY_COMPILE([
#if (defined (__i386__) || defined (__i486__) ||\
     defined (__i586__) || defined (__WIN32__) || defined (__DJGPP))
/* */
#else
#error Not i386.
#endif
  ], [], snes9x_cv_i386_cpu=yes, snes9x_cv_i386_cpu=no)])
AC_MSG_RESULT($snes9x_cv_i386_cpu)

AC_MSG_CHECKING(if the OS is Linux)
AC_CACHE_VAL(snes9x_cv_linux_os, [
  AC_TRY_COMPILE([
#ifdef __linux
/* */
#else
#error Not Linux.
#endif
  ], [], snes9x_cv_linux_os=yes, snes9x_cv_linux_os=no)])
AC_MSG_RESULT($snes9x_cv_linux_os)

AC_MSG_CHECKING(if the OS is HP-UX)
AC_CACHE_VAL(snes9x_cv_hpux_os, [
  AC_TRY_COMPILE([
#ifdef __hpux
/* */
#else
#error Not Hpux.
#endif
  ], [], snes9x_cv_hpux_os=yes, snes9x_cv_hpux_os=no)])
AC_MSG_RESULT($snes9x_cv_hpux_os)

AC_MSG_CHECKING(if the OS is MS Windows)
AC_CACHE_VAL(snes9x_cv_win32_os, [
  AC_TRY_COMPILE([
#if defined (__WIN32__)
/* */
#else
#error Not Hpux.
#endif
  ], [], snes9x_cv_win32_os=yes, snes9x_cv_win32_os=no)])
AC_MSG_RESULT($snes9x_cv_win32_os)


dnl Set assembler to !nasm on Windows

if test yes = "$snes9x_cv_win32_os"; then
  NASM='rntcl'
else
  AC_PATH_PROG(prog_nasm, nasm, no)
  if test "x$ac_cv_path_prog_nasm" = "xno"; then
    if test yes = "$snes9x_cv_i386_cpu"; then
      AC_MSG_WARN([No nasm found. Will build without assembler optimizations.])
    fi
    with_assembler="no"
  else
    NASM="$ac_cv_path_prog_nasm"
  fi
fi


dnl Enable assembler optimizations if CPU is x86

if test yes = "$snes9x_cv_i386_cpu" -a yes = "$with_assembler"; then
  ZSNESFX='ZSNESFX=1'
  ZSNESC4='ZSNESC4=1'
  ASMCPU='ASMCPU=1'
  ASMKREED='ASMKREED=1'
#  SPC700ASM='SPC700ASM=1'
  I386SPC='i386/SPC.O'
  CPUINC='-Ii386'
else
  with_assembler="no"
  SYSDEFINES="$SYSDEFINES"' -DNOASM'
fi

dnl Enable SDD1 decompression if requested
if test yes = "$with_sdd1_decomp"; then
  SDD1_DECOMP='SDD1_DECOMP=1'
fi

dnl Enable joystick support on Linux

if test yes = "$snes9x_cv_linux_os" -a yes = "$with_joystick"; then
   JOYDEFINES=' -DJOYSTICK_SUPPORT'
else
   with_joystick="no"
fi

dnl Enable debugger
if test yes = "$with_debugger"; then
   SYSDEFINES="$SYSDEFINES"' -DDEBUGGER'
fi


dnl FIXME: Use the included zlib if the system zlib doesn't work
dnl AC_CHECK_HEADER(zlib.h, [
  SYSDEFINES="$SYSDEFINES"' -DZLIB'
dnl ])


dnl Enable PNG support for screenshots
if test yes = "$with_screenshot"; then
  AC_CHECK_LIB(png, png_jmpbuf, [
    SYSDEFINES="$SYSDEFINES"' -DHAVE_LIBPNG'
    SYSLIBS="$SYSLIBS -lpng"
  ], , -lz -lm)
fi



dnl Check for functions
AC_CHECK_FUNC(mkstemp, [
  SYSDEFINES="$SYSDEFINES"' -DHAVE_MKSTEMP'
])

dnl Check for posix threads, will be overridden if no sound is found
dnl FIXME: This is very very basic. A lot of systems can be coaxed to
dnl        cough up pthreads.
THREAD_SOUND='#THREAD_SOUND=1'
AC_CHECK_HEADER(pthread.h, [ 
  THREAD_SOUND='THREAD_SOUND=1' 
])


dnl Locate X include

AC_PATH_X
if test xyes = x$no_x ; then
  dnl Maybe AC_MSG_ERROR?
  AC_MSG_WARN([X is normally required to build on Unix.])
fi
LIBS="-L$x_libraries -lX11 -lXext"
SYSLIBS="$SYSLIBS -L$x_libraries"
if test x$x_includes != x ; then
  XINCLUDES="-I$x_includes"
else
  AC_MSG_WARN([Configure did not find X includes, this might be a problem.])
fi
AC_CHECK_LIB(Xxf86dga, XDGAQueryVersion, [
  SYSDEFINES="$SYSDEFINES"' -DUSE_DGA_EXTENSION'
  SYSLIBS="$SYSLIBS"' -lXxf86dga'
])


dnl See if X has the vidmode extension.

AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryVersion, [
  SYSDEFINES="$SYSDEFINES"' -DUSE_VIDMODE_EXTENSION'
  SYSLIBS="$SYSLIBS"' -lXxf86vm'
])


dnl Search for GNU make

dnl AC_MSG_CHECKING(for GNU make)

dnl snes9x_cv_gnu_make_command=no
dnl for x in "${MAKE:-make}" make gmake gnumake ; do
dnl   if [ "`$x --version 2> /dev/null | grep -c GNU`" != "0" ] ; then
dnl     snes9x_cv_gnu_make_command=$x ;
dnl     break ;
dnl   fi
dnl done
dnl AC_MSG_RESULT($snes9x_cv_gnu_make_command)
dnl if test "x$snes9x_cv_gnu_make_command" = xno ; then
dnl   AC_MSG_WARN([
dnl Snes9X must have GNU make to compile. Please get on from the nearest 
dnl GNU mirror.
dnl ])
dnl fi


dnl We want an absolute path to the source-dir.

case "$srcdir" in
    /*)
    ;;
    *)
	oldsrcdir="$srcdir"
	srcdir="`cd \"$srcdir\";pwd`"
	AC_MSG_WARN([
Converted $oldsrcdir to $srcdir,
If this does not work, please use an absolute path to the configure script. 
])
    ;;
esac


dnl Check for headers

AC_CHECK_HEADER(strings.h, [
  SYSDEFINES="$SYSDEFINES"' -DHAVE_STRINGS_H'
])

AC_CHECK_HEADER(sys/ioctl.h, [
  SYSDEFINES="$SYSDEFINES"' -DHAVE_SYS_IOCTL_H'
])

AC_CHECK_HEADERS(unistd.h sys/socket.h winsock.h winsock2.h WS2tcpip.h)


dnl Check accept. Thoughly.

AC_MSG_CHECKING(for the type of the last argument to accept)
AC_CACHE_VAL(snes9x_cv_accept_size_t, [
  for t in socklen_t size_t int; do
    AC_TRY_COMPILE([
#ifndef _LARGEFILE_SOURCE
#  define _FILE_OFFSET_BITS 64
#  define _LARGEFILE_SOURCE
#  define _LARGEFILE64_SOURCE 1
#endif
/* HPUX needs these too... */
#ifndef __STDC_EXT__
#  define __STDC_EXT__
#endif /* !__STDC_EXT__ */

#include <sys/types.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif

/* NT */
#ifdef HAVE_WINSOCK2_H
#include <WinSock2.h>
#ifdef HAVE_WS2TCPIP_H
/* Needed for IPv6 support. */
#include <WS2tcpip.h>
#endif
#elif defined(HAVE_WINSOCK_H)
#include <winsock.h>
#endif

/* Here is the actual test: */
int accept(int, struct sockaddr *, $t *);
    ], [
      /* EMPTY */
    ], [
      snes9x_cv_accept_size_t=$t
      break
    ], [
      AC_TRY_COMPILE([
#ifndef _LARGEFILE_SOURCE
#  define _FILE_OFFSET_BITS 64
#  define _LARGEFILE_SOURCE
#  define _LARGEFILE64_SOURCE 1
#endif
/* HPUX needs these too... */
#ifndef __STDC_EXT__
#  define __STDC_EXT__
#endif /* !__STDC_EXT__ */

#include <sys/types.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif

/* NT */
#ifdef HAVE_WINSOCK2_H
#include <WinSock2.h>
#ifdef HAVE_WS2TCPIP_H
/* Needed for IPv6 support. */
#include <WS2tcpip.h>
#endif
#elif defined(HAVE_WINSOCK_H)
#include <winsock.h>
#endif

/* Here is the actual test: */
SOCKET accept(SOCKET, struct sockaddr *, $t *);
      ], [
        /* EMPTY */
      ], [
	snes9x_cv_accept_size_t=$t
	break
      ], [])
    ])
  done
  if test "x$snes9x_cv_accept_size_t" = "x"; then
    # Check if it could be a Psocklen_t
    # Psocklen_t is a stupid typedef of socklen_t *.
    AC_TRY_COMPILE([
#ifndef _LARGEFILE_SOURCE
#  define _FILE_OFFSET_BITS 64
#  define _LARGEFILE_SOURCE
#  define _LARGEFILE64_SOURCE 1
#endif
/* HPUX needs these too... */
#ifndef __STDC_EXT__
#  define __STDC_EXT__
#endif /* !__STDC_EXT__ */

#include <sys/types.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif

/* NT */
#ifdef HAVE_WINSOCK2_H
#include <WinSock2.h>
#ifdef HAVE_WS2TCPIP_H
/* Needed for IPv6 support. */
#include <WS2tcpip.h>
#endif
#elif defined(HAVE_WINSOCK_H)
#include <winsock.h>
#endif

/* Here is the actual test: */
int accept(int, struct sockaddr *, Psocklen_t);
    ], [
      /* EMPTY */
    ], [
      snes9x_cv_accept_size_t=socklen_t
    ], [
      # FIXME: Should probably have a warning here.
      # FIXME: Should we check if socklen_t exists, and use that?
      snes9x_cv_accept_size_t=int
    ])
  fi
])
AC_MSG_RESULT($snes9x_cv_accept_size_t *)
AC_DEFINE_UNQUOTED(ACCEPT_SIZE_T, $snes9x_cv_accept_size_t)
SYSDEFINES="$SYSDEFINES ""'"-DACCEPT_SIZE_T=$snes9x_cv_accept_size_t"'"

dnl heavy socket testing ends here...


dnl HP-UX needs this to get sane declarations of some Unix98 interfaces.

AC_MSG_CHECKING(if _XOPEN_SOURCE_EXTENDED is defined)
AC_CACHE_VAL(snes9x_cv_xopen_source_extended, [
AC_TRY_COMPILE([
#ifdef _XOPEN_SOURCE_EXTENDED
/* */
#else
#error _XOPEN_SOURCE_EXTENDED not defined.
#endif
  ], [], snes9x_cv_xopen_source_extended=yes, snes9x_cv_xopen_source_extended=no)])
AC_MSG_RESULT($snes9x_cv_xopen_source_extended)

if test no = $snes9x_cv_xopen_source_extended -a \
        yes = $snes9x_cv_hpux_os ; then
SYSDEFINES="$SYSDEFINES"' -D_XOPEN_SOURCE_EXTENDED'
AC_MSG_RESULT([Defining _XOPEN_SOURCE_EXTENDED since HP-UX needs it.])
fi


dnl Check if we have sound code for this platform

AC_MSG_CHECKING(if sound is supported on this platform)
AC_CACHE_VAL(snes9x_cv_sound, [
AC_TRY_COMPILE([
#if defined(__linux) || defined(__sun) || defined(__sgi)
/* */
#else
#error No sound for this platform
#endif
  ], [], snes9x_cv_sound=yes, snes9x_cv_sound=no)])
AC_MSG_RESULT($snes9x_cv_sound)
if test no = $snes9x_cv_sound ; then
SYSDEFINES="$SYSDEFINES"' -DNOSOUND'
THREAD_SOUND='#THREAD_SOUND=1'
fi

dnl Checks for libraries.
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, socket)
SYSLIBS="$SYSLIBS $LIBS"
	
BASEDIR=`(cd $srcdir/.. ; pwd)`
BUILDDIR=`pwd`

touch dependencies

AC_SUBST(OPTIMIZE)
AC_SUBST(RTTIFLAG)
AC_SUBST(ZSNESFX)
AC_SUBST(ZSNESC4)
AC_SUBST(ASMCPU)
AC_SUBST(ASMKREED)
AC_SUBST(SDD1_DECOMP)
AC_SUBST(SPC700ASM)
AC_SUBST(I386SPC)
AC_SUBST(THREAD_SOUND)
AC_SUBST(SYSLIBS)
AC_SUBST(CPUINC)
AC_SUBST(SYSDEFINES)
AC_SUBST(JOYDEFINES)
AC_SUBST(XINCLUDES)
AC_SUBST(BUILDDIR)
AC_SUBST(NASM)
AC_SUBST(GLIDE)
AC_SUBST(OPENGL)
AC_SUBST(AIDO)

rm config.info 2>/dev/null

cat >config.info <<EOF

build information:
cc................ $CC
cxx............... $CXX
options........... $OPTIMIZE
libs.............. $SYSLIBS
defines........... $SYSDEFINES
sound support..... $snes9x_cv_sound
display system.... $snes9x_info_display
joystick support.. $with_joystick
using asm cores... $with_assembler		 		 
SDD1 decompession. $with_sdd1_decomp
debugger.......... $with_debugger

EOF

cat config.info
	
AC_OUTPUT(Makefile)
